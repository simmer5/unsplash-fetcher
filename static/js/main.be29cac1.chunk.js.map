{"version":3,"sources":["api/unsplash.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","className","this","type","value","onChange","e","setState","target","React","Component","ImageCard","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","image","description","urls","rest","console","log","style","gridRowEnd","ref","alt","src","regular","ImageList","images","map","key","id","App","onSearchSubmit","a","async","unsplash","get","params","query","response","data","results","marginTop","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,2BACTC,QAAS,CACPC,cACE,gFCoBSC,E,2MAvBbC,MAAQ,CAAEC,KAAM,I,EAEhBC,aAAe,SAAAC,GACbA,EAAMC,iBACN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,wEAEvB,IAAD,OACP,OACE,yBAAKM,UAAU,cACb,0BAAMD,SAAUE,KAAKN,aAAcK,UAAU,WAC3C,yBAAKA,UAAU,SACb,+CACA,2BACEE,KAAK,OACLC,MAAOF,KAAKR,MAAMC,KAClBU,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEZ,KAAMW,EAAEE,OAAOJ,kB,GAhBpCK,IAAMC,W,gBCgCfC,E,YA/Bb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KASRa,SAAW,WACT,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAE/BC,EAAQC,KAAKC,KAAKN,EAAS,IAEjC,EAAKN,SAAS,CAAEU,WAbhB,EAAKvB,MAAQ,CAAEuB,MAAO,GAEtB,EAAKH,SAAWL,IAAMW,YAJL,E,iFAQjBlB,KAAKY,SAASC,QAAQM,iBAAiB,OAAQnB,KAAKU,Y,+BAU5C,IAAD,EACgCV,KAAKH,MAAMuB,MAA1CC,EADD,EACCA,YAAaC,EADd,EACcA,KAASC,EADvB,sCAKP,OAHAC,QAAQC,IAAI,0BAA2BF,GACvCC,QAAQC,IAAI,yBAA0BzB,KAAKH,OAGzC,yBAAK6B,MAAO,CAAEC,WAAW,QAAD,OAAU3B,KAAKR,MAAMuB,SAC3C,yBAAKa,IAAK5B,KAAKY,SAAUiB,IAAKR,EAAaS,IAAKR,EAAKS,e,GA1BrCxB,IAAMC,WCUfwB,EARG,SAAAnC,GAChB,IAAMoC,EAASpC,EAAMoC,OAAOC,KAAI,SAAAd,GAC9B,OAAO,kBAAC,EAAD,CAAWe,IAAKf,EAAMgB,GAAIhB,MAAOA,OAG1C,OAAO,yBAAKrB,UAAU,cAAckC,ICkBvBI,E,2MArBb7C,MAAQ,CAAEyC,OAAQ,I,EAElBK,eAAiB,SAAM7C,GAAN,eAAA8C,EAAAC,OAAA,kEAAAD,EAAA,MACQE,EAASC,IAAI,iBAAkB,CACpDC,OAAQ,CAAEC,MAAOnD,MAFJ,OACToD,EADS,OAKf,EAAKxC,SAAS,CAAE4B,OAAQY,EAASC,KAAKC,UALvB,sC,wEASf,OACE,yBAAKhD,UAAU,eAAe2B,MAAO,CAAEsB,UAAW,SAChD,kBAAC,EAAD,CAAWlD,SAAUE,KAAKsC,iBAD5B,UAEUtC,KAAKR,MAAMyC,OAAOgB,OAF5B,WAGE,kBAAC,EAAD,CAAWhB,OAAQjC,KAAKR,MAAMyC,c,GAhBpB1B,IAAMC,WCOJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be29cac1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.unsplash.com\",\r\n  headers: {\r\n    Authorization:\r\n      \"Client-ID 0673268b68982726f77be69a7b3e8470f8970871b2d61248f65467e8717c7f68\"\r\n  }\r\n});\r\n","import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { term: \"\" };\r\n\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.term);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment\">\r\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n          <div className=\"field\">\r\n            <label>Image finder</label>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.term}\r\n              onChange={e => this.setState({ term: e.target.value })}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nclass ImageCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { spans: 0 };\r\n\r\n    this.imageRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.imageRef.current.addEventListener(\"load\", this.setSpans);\r\n  }\r\n  setSpans = () => {\r\n    const height = this.imageRef.current.clientHeight;\r\n\r\n    const spans = Math.ceil(height / 10);\r\n\r\n    this.setState({ spans });\r\n  };\r\n\r\n  render() {\r\n    const { description, urls, ...rest } = this.props.image;\r\n    console.log(\"Cia pareina restai visi\", rest);\r\n    console.log(\"Cia pareina Props visi\", this.props);\r\n\r\n    return (\r\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\r\n        <img ref={this.imageRef} alt={description} src={urls.regular}></img>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"./ImageList.css\";\r\nimport ImageCard from \"./ImageCard\";\r\n\r\nconst ImageList = props => {\r\n  const images = props.images.map(image => {\r\n    return <ImageCard key={image.id} image={image} />;\r\n  });\r\n\r\n  return <div className=\"image-list\">{images}</div>;\r\n};\r\n\r\nexport default ImageList;\r\n","import React from \"react\";\nimport unsplash from \"./api/unsplash\";\nimport SearchBar from \"./components/SearchBar\";\nimport ImageList from \"./components/ImageList\";\n\nclass App extends React.Component {\n  state = { images: [] };\n\n  onSearchSubmit = async term => {\n    const response = await unsplash.get(\"/search/photos\", {\n      params: { query: term }\n    });\n\n    this.setState({ images: response.data.results });\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{ marginTop: \"15px\" }}>\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        Found: {this.state.images.length} images.\n        <ImageList images={this.state.images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}